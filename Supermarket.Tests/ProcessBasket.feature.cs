// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Supermarket.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProcessBasketFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProcessBasket.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProcessBasket", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProcessBasket")))
            {
                Supermarket.Tests.ProcessBasketFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Buying an item produces a bill")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProcessBasket")]
        public virtual void BuyingAnItemProducesABill()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buying an item produces a bill", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item Name",
                        "Price",
                        "Item Type"});
            table1.AddRow(new string[] {
                        "Learning C#",
                        "20.99",
                        "Book"});
            table1.AddRow(new string[] {
                        "Automated Testing 101",
                        "10.00",
                        "Book"});
            table1.AddRow(new string[] {
                        "Cucumber",
                        "15.99",
                        "Book"});
#line 4
 testRunner.Given("I buy the following items", ((string)(null)), table1, "Given ");
#line 9
 testRunner.When("the basket is sent to the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item Type",
                        "Item Price"});
            table2.AddRow(new string[] {
                        "Book",
                        "20.99"});
            table2.AddRow(new string[] {
                        "Book",
                        "10.00"});
            table2.AddRow(new string[] {
                        "Book",
                        "15.99"});
            table2.AddRow(new string[] {
                        "<BLANK LINE>",
                        ""});
            table2.AddRow(new string[] {
                        "Sub Total:",
                        "46.98"});
            table2.AddRow(new string[] {
                        "Tax:",
                        "0"});
            table2.AddRow(new string[] {
                        "Discount:",
                        "0"});
            table2.AddRow(new string[] {
                        "Total:",
                        "46.98"});
#line 10
 testRunner.Then("the bill has the following:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Buying a gizmo produces a bill where the gizmo is taxed 20%")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProcessBasket")]
        public virtual void BuyingAGizmoProducesABillWhereTheGizmoIsTaxed20()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buying a gizmo produces a bill where the gizmo is taxed 20%", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item Name",
                        "Price",
                        "Item Type",
                        "Tax Percentage"});
            table3.AddRow(new string[] {
                        "Learning C#",
                        "20.99",
                        "Book",
                        "0"});
            table3.AddRow(new string[] {
                        "Gizmo",
                        "10.00",
                        "Gizmo",
                        "20"});
#line 22
 testRunner.Given("I buy the following items", ((string)(null)), table3, "Given ");
#line 26
 testRunner.When("the basket is sent to the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item Type",
                        "Item Price"});
            table4.AddRow(new string[] {
                        "Book",
                        "20.99"});
            table4.AddRow(new string[] {
                        "Gizmo",
                        "10.00"});
            table4.AddRow(new string[] {
                        "<BLANK LINE>",
                        ""});
            table4.AddRow(new string[] {
                        "Sub Total:",
                        "30.99"});
            table4.AddRow(new string[] {
                        "Tax:",
                        "2.00"});
            table4.AddRow(new string[] {
                        "Discount:",
                        "0"});
            table4.AddRow(new string[] {
                        "Total:",
                        "32.99"});
#line 27
 testRunner.Then("the bill has the following:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
